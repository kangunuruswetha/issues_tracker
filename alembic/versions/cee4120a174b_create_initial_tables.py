"""Create initial tables

Revision ID: cee4120a174b
Revises:
Create Date: 2025-07-04 18:06:39.716657

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # Keep this import

# IMPORTANT: We are NOT importing IssueStatus, IssueSeverity, UserRole here anymore
# for the create_type/drop_type calls, as they are Python Enums, not SQLAlchemy types.
# The previous solution used them incorrectly.


# revision identifiers, used by Alembic.
revision: str = 'cee4120a174b'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # --- MODIFIED: Explicitly create the ENUM types in PostgreSQL BEFORE table creation ---
    # We use sa.Enum to construct a SQLAlchemy type object, then call its .create() method.
    # The 'name' parameter MUST match the name used in your sa.Column definitions below.
    sa.Enum('OPEN', 'TRIAGED', 'IN_PROGRESS', 'DONE', name='issuestatus').create(op.get_bind(), checkfirst=True)
    sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='issueseverity').create(op.get_bind(), checkfirst=True)
    sa.Enum('ADMIN', 'MAINTAINER', 'REPORTER', name='userrole').create(op.get_bind(), checkfirst=True)
    # --- END MODIFICATION ---

    op.create_table('daily_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('open_count', sa.Integer(), nullable=True),
    sa.Column('triaged_count', sa.Integer(), nullable=True),
    sa.Column('in_progress_count', sa.Integer(), nullable=True),
    sa.Column('done_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_daily_stats_id'), 'daily_stats', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    # --- REMAINS UNCHANGED (correctly uses postgresql.ENUM with create_type=False) ---
    sa.Column('role', postgresql.ENUM('ADMIN', 'MAINTAINER', 'REPORTER', name='userrole', create_type=False), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('issues',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    # --- REMAINS UNCHANGED (correctly uses postgresql.ENUM with create_type=False) ---
    sa.Column('status', postgresql.ENUM('OPEN', 'TRIAGED', 'IN_PROGRESS', 'DONE', name='issuestatus', create_type=False), nullable=True),
    # --- REMAINS UNCHANGED (correctly uses postgresql.ENUM with create_type=False) ---
    sa.Column('severity', postgresql.ENUM('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='issueseverity', create_type=False), nullable=True),
    sa.Column('file_path', sa.String(), nullable=True),
    sa.Column('tags', sa.String(), nullable=True), # Confirmed correct for your model
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_issues_id'), 'issues', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_issues_id'), table_name='issues')
    op.drop_table('issues')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_daily_stats_id'), table_name='daily_stats')
    op.drop_table('daily_stats')

    # --- MODIFIED: Explicitly drop the ENUM types in PostgreSQL AFTER table drops ---
    # We use sa.Enum to construct a SQLAlchemy type object, then call its .drop() method.
    # The 'name' parameter MUST match the name used in your sa.Column definitions.
    sa.Enum('OPEN', 'TRIAGED', 'IN_PROGRESS', 'DONE', name='issuestatus').drop(op.get_bind(), checkfirst=True)
    sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='issueseverity').drop(op.get_bind(), checkfirst=True)
    sa.Enum('ADMIN', 'MAINTAINER', 'REPORTER', name='userrole').drop(op.get_bind(), checkfirst=True)
    # --- END MODIFICATION ---
    # ### end Alembic commands ###